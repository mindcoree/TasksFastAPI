"""base

Revision ID: afdbfd3b10d2
Revises:
Create Date: 2025-06-12 15:06:06.159517

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "afdbfd3b10d2"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "members",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("login", sa.String(length=40), nullable=False),
        sa.Column("hash_password", sa.String(), nullable=False),
        sa.Column(
            "role", sa.Enum("ADMIN", "USER", name="role"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("login"),
    )
    op.create_table(
        "products",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("price", sa.DECIMAL(precision=10, scale=2), nullable=False),
        sa.Column("stock", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint("price > 0", name="price_positive"),
        sa.CheckConstraint("stock >= 0", name="stock_non_negative"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "bank_accounts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "bank_name",
            sa.Enum(
                "SBERBANK",
                "TINKOFF",
                "ALFABANK",
                "HOMECREDIT",
                name="bank_name",
            ),
            nullable=False,
        ),
        sa.Column(
            "balance", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.Column(
            "encrypted_account_number",
            sa.String(),
            nullable=False,
            comment="Зашифрованный номер карты",
        ),
        sa.Column(
            "hash_account_number",
            sa.String(),
            nullable=False,
            comment="Хешированный номер карты",
        ),
        sa.Column(
            "masked_account_number",
            sa.String(),
            nullable=False,
            comment="Маскированный номер (**** **** **** 1234)",
        ),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.Column(
            "payment_system",
            sa.Enum("VISA", "MASTERCARD", "MIR", name="payment_system"),
            nullable=False,
        ),
        sa.Column(
            "account_status",
            sa.Enum("ACTIVE", "BLOCKED", "EXPIRED", name="account_status"),
            nullable=False,
        ),
        sa.Column("member_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["member_id"], ["members.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("hash_account_number"),
    )
    op.create_table(
        "orders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("shipping_address", sa.String(), nullable=True),
        sa.Column(
            "order_status",
            sa.Enum(
                "PENDING",
                "PROCESSING",
                "SHIPPED",
                "DELIVERED",
                "CANCELLED",
                name="order_status",
            ),
            nullable=False,
        ),
        sa.Column(
            "total_amount", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.Column(
            "payment_status",
            sa.Enum("PENDING", "PAID", "FAILED", name="payment_status"),
            nullable=False,
        ),
        sa.Column("member_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "total_amount >= 0", name="total_amount_non_negative"
        ),
        sa.ForeignKeyConstraint(
            ["member_id"], ["members.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "order_product_association",
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column(
            "unit_price", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.Column(
            "discount", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.CheckConstraint("discount >= 0", name="discount_non_negative"),
        sa.CheckConstraint("quantity > 0", name="quantity_positive"),
        sa.CheckConstraint("unit_price > 0", name="unit_price_positive"),
        sa.ForeignKeyConstraint(
            ["order_id"], ["orders.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["product_id"], ["products.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint(
            "order_id", "product_id", name="pk_order_product"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order_product_association")
    op.drop_table("orders")
    op.drop_table("bank_accounts")
    op.drop_table("products")
    op.drop_table("members")
    # ### end Alembic commands ###
